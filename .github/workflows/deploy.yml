name: Deploy SalesFlow to GitHub Actions

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment environment
        run: |
          # Create environment file for deployment
          cat > .env << EOF
          GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
          OPENSEARCH_HOST=http://opensearch:9200
          BACKEND_URL=http://backend:8000
          EOF

      - name: Set up Docker Compose
        run: |
          # Create production docker-compose file
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
              ports:
                - "8000:8000"
              environment:
                - GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
                - OPENSEARCH_HOST=http://opensearch:9200
              depends_on:
                opensearch:
                  condition: service_healthy
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/"]
                interval: 30s
                timeout: 10s
                retries: 3

            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
              ports:
                - "8501:8501"
              environment:
                - BACKEND_URL=http://backend:8000
              depends_on:
                backend:
                  condition: service_healthy
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
                interval: 30s
                timeout: 10s
                retries: 3

            opensearch:
              image: opensearchproject/opensearch:2.11.1
              environment:
                - discovery.type=single-node
                - DISABLE_SECURITY_PLUGIN=true
                - DISABLE_INSTALL_DEMO_CONFIG=true
                - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
                - bootstrap.memory_lock=true
              ports:
                - "9200:9200"
              volumes:
                - opensearch_data:/usr/share/opensearch/data
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 60s
              ulimits:
                memlock:
                  soft: -1
                  hard: -1
                nofile:
                  soft: 65536
                  hard: 65536

          volumes:
            opensearch_data:
              driver: local

          networks:
            default:
              driver: bridge
          EOF

      - name: Deploy services
        run: |
          echo "🚀 Starting deployment..."
          
          # Pull latest images
          docker compose -f docker-compose.prod.yml pull
          
          # Start services
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          echo "⏳ Waiting for services to be healthy..."
          timeout 300 bash -c 'until docker compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 10; done'
          
          # Show service status
          docker compose -f docker-compose.prod.yml ps
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Frontend available at: http://localhost:8501"
          echo "🔧 Backend API available at: http://localhost:8000"
          echo "🔍 OpenSearch available at: http://localhost:9200"

      - name: Load sample data
        run: |
          echo "📦 Loading sample data..."
          sleep 30  # Wait a bit more for services to be fully ready
          
          # Load sample data via API
          curl -X POST http://localhost:8000/api/data/load-sample \
            -H "Content-Type: application/json" \
            --retry 5 \
            --retry-delay 10 \
            --retry-connrefused \
            || echo "⚠️ Sample data loading failed - will be available via frontend"

      - name: Run health checks
        run: |
          echo "🏥 Running health checks..."
          
          # Check backend health
          curl -f http://localhost:8000/ || exit 1
          echo "✅ Backend is healthy"
          
          # Check OpenSearch health
          curl -f http://localhost:9200/_cluster/health || exit 1
          echo "✅ OpenSearch is healthy"
          
          # Check if frontend is responding (basic check)
          curl -f http://localhost:8501 || echo "⚠️ Frontend check needs manual verification"
          
          echo "🎉 All health checks passed!"

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "🧹 Cleaning up after failure..."
          docker compose -f docker-compose.prod.yml logs
          docker compose -f docker-compose.prod.yml down -v